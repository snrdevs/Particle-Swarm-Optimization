
% NIMA PEDRAMASL - MIDDLE EAST TECHNICAL UNIVERSITY 2015
% PARTICLE SWARM OPTIMIZATION (PSO) WELDED BEAM DESIGN PROBLEM
clear;clc;close;
%% PSO PARAMETERS WITH THEIR USUAL RANGE USED IN LITERATURE
swarm_size = 60; % SWARM SIZE
no_design_variable = 4; % NUMBER OF DESIGN VARIABLES
c1_final = 0.5; % FINAL SELF-CONFIDENCE PARAMETER [0-4]
c1_initial = 2.5; % INITIAL SELF-CONFIDENCE PARAMETER [0-4]
c2_final = 2.5; % FINAL SWARM-CONFIDENCE PARAMETER [0-4]
c2_initial = 0.5; % FINAL SWARM-CONFIDENCE PARAMETER [0-4]
weight_final = 0.4; % FINAL INERTIA WEIGHT [0-1]
weight_initial = 0.9; % INITIAL INERTIA WEIGHT [0-1]
x_max = 3; % MAXIMUM POSITION
iter_max = 300; % MAXIMUM NO OF ITERATIONS
iter = 0; % CURRENT ITERATION
particle_best = cell(1,swarm_size); % PARTICLE BEST POSITION
particle_best_objective = ones(1,swarm_size)*1E50; % PARTICLE BEST POSITION OBJECTIVE VALUE
global_best_objective = 1E50; % GLOBAL BEST POSITION OBJECTIVE VALUE
global_best = zeros(1,no_design_variable); % GLOBAL BEST POSITION
particle_position = cell(1,swarm_size); % PARTICLE POSITION
obj_fun = zeros(1,swarm_size); % OBJECTIVE FUNCTION VALUE OF PARTICLE
particle_velocity = cell(1,swarm_size); % PARTICLE VELOCITY
dummy = zeros(1,length(no_design_variable)); % DUMMY LIST
dt = 1; % TIME STEP
%% WELDED BEAM DESIGN PROBLEM DEFINITION (all units are in british system)
P = 6000; % APPLIED TIP LOAD
E = 30e6; % YOUNGS MODULUS OF BEAM
G = 12e6; % SHEAR MODULUS OF BEAM
L = 14; % LENGTH OF CANTILEVER PART OF BEAM

PCONST = 1000000; % PENALTY FUNCTION CONSTANT
TAUMAX = 13600; % MAXIMUM ALLOWED SHEAR STRESS
SIGMAX = 30000; % MAXIMUM ALLOWED BENDING STRESS
DELTMAX = 0.25; % MAXIMUM ALLOWED TIP DEFLECTION

M = @(x) P*(L+x(2)/2); % BENDING MOMENT AT WELD POINT
R = @(x) sqrt((x(2)^2)/4+((x(1)+x(3))/2)^2); % SOME CONSTANT
J = @(x) 2*(sqrt(2)*x(1)*x(2)*((x(2)^2)/12+((x(1)+x(3))/2)^2)); % POLAR MOMENT OF INERTIA

objective_function = @(x) 1.10471*x(1)^2*x(2)+0.04811*x(3)*x(4)*(14+x(2)); % OBJECTIVE FUNCTION
sigma = @(x) (6*P*L)/(x(4)*x(3)^2); % BENDING STRESS
delta = @(x) (4*P*L^3)/(E*x(4)*x(3)^3); % TIP DEFLECTION
Pc = @(x) 4.013*E*sqrt((x(3)^2*x(4)^6)/36)*(1-x(3)*sqrt(E/(4*G))/(2*L))/(L^2); % BUCKLING LOAD
tau_p = @(x) P/(sqrt(2)*x(1)*x(2)); % 1ST DERIVATIVE OF SHEAR STRESS
tau_pp = @(x) (M(x)*R(x))/J(x); % 2ND DERIVATIVE OF SHEAR STRESS
tau = @(x) sqrt(tau_p(x)^2+2*tau_p(x)*tau_pp(x)*x(2)/(2*R(x))+tau_pp(x)^2); % SHEAR STRESS
g1 = @(x) tau(x)-TAUMAX; % MAX SHEAR STRESS CONSTRAINT
g2 = @(x) sigma(x)-SIGMAX; % MAX BENDING STRESS CONSTRAINT
g3 = @(x) x(1)-x(4); % WELD COVERAGE CONSTRAINT
g4 = @(x) 0.10471*x(1)^2+0.04811*x(3)*x(4)*(14+x(2))-5; % MAX COST CONSTRAINT
g5 = @(x) 0.125-x(1); % MAX WELD THICKNESS CONSTRAINT
g6 = @(x) delta(x)-DELTMAX; % MAX TIP DEFLECTION CONSTRAINT
g7 = @(x) P-Pc(x); % BUCKLING LOAD CONSTRAINT
penalty_function = @(x) objective_function(x) + PCONST*(max(0,g1(x))^2+max(0,g1(x))^2+max(0,g2(x))^2+...
    max(0,g3(x))^2+max(0,g4(x))^2+max(0,g5(x))^2+...
    max(0,g6(x))^2+max(0,g7(x))^2); % PENALTY FUNCTION
%% PSO INITIALIZE PARTICLES POSITION AND VELOCITIES
for i = 1:swarm_size
    for j = 1:no_design_variable
        dummy(j) = rand()*x_max;
    end
    particle_position{i} = dummy;
    particle_velocity{i} = particle_position{i}/dt;
end
%% PSO MAIN LOOP
while iter < iter_max
    C1 = (c1_final-c1_initial)*(iter/iter_max)+c1_initial; % CHANGING SELF-CONFIDENCE
    C2 = (c2_final-c2_initial)*(iter/iter_max)+c2_initial; % CHANGING SWARM-CONFIDENCE
    W = (weight_final-weight_initial)*(iter/iter_max)+weight_initial; % CHANGING INERTIA WEIGHT
    iter = iter + 1;
    for i = 1:swarm_size
        obj_fun(i) = penalty_function(particle_position{i});
        if obj_fun(i) < particle_best_objective(i) & obj_fun(i) >= 0  % FINDING BEST LOCAL
            particle_best{i} = particle_position{i};
            particle_best_objective(i) = obj_fun(i);
        end
    end
    if min(obj_fun) < global_best_objective & min(obj_fun) >= 0 % FINDING BEST GLOBAL
        global_best = particle_position{obj_fun == min(obj_fun)};
        global_best_objective = min(obj_fun);
    end
    for i = 1:swarm_size % PARTICLE POSITION UPDATE
        R1 = rand(); % random number [0-1]
        R2 = rand(); % random number [0-1]
        particle_velocity{i} = W*particle_velocity{i}+C1*R1*(particle_best{i}-particle_position{i})/dt+C2*R2*(global_best-particle_position{i})/dt; % PARTICLE VELOCITY UPDATE
        particle_position{i} = particle_position{i}+particle_velocity{i}*dt; % PARTICLE POSITION UPDATE
    end
    disp(['BEST PARTICLE VALUE >> ' num2str(global_best_objective)]);
end
disp(['BEST PARTICLE POSITION >> ' num2str(global_best)]);
